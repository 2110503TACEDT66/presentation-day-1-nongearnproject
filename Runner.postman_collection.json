{
	"info": {
		"_postman_id": "ed2243a0-fb34-4d32-8b10-23cf9b08519f",
		"name": "Runner",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29527746"
	},
	"item": [
		{
			"name": "UserRunner",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"TOKEN\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"Status code is 200, Register done\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Get Me\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "JSON Type",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"tel\": \"{{$randomPhoneNumber}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"12345678\",\r\n    \"role\": \"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/auth/register",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200, Validation checked\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const global_email = response.data.email;\r",
									"//const global_userID = response.data._id;\r",
									"\r",
									"pm.globals.set(\"global_email\", global_email);\r",
									"//pm.globals.set(\"global_userID\", global_userID);\r",
									"\r",
									"postman.setNextRequest(\"Login\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/v1/auth/me",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"TOKEN\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"Status code is 200, Login done\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Get All CWSs\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "JSON Type",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{global_email}}\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/auth/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All CWSs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const index = Math.trunc(Math.random() * response.data.length);\r",
									"const global_CWSID = response.data[index]._id;\r",
									"\r",
									"pm.globals.set(\"global_CWSID\", global_CWSID);\r",
									"\r",
									"const cws_count = response.count;\r",
									"let cws_count_string;\r",
									"\r",
									"if (cws_count > 0) {\r",
									"    if (cws_count === 1) {\r",
									"        cws_count_string = \"There's only 1 coworkingspace\";\r",
									"    } else {\r",
									"        cws_count_string = \"There're \" + cws_count + \" coworkingspaces\";\r",
									"    }\r",
									"    pm.test(cws_count_string, () => {\r",
									"        pm.expect(response.count).to.be.above(0);\r",
									"    });\r",
									"} else {\r",
									"    cws_count_string = \"There's no coworkingspace\";\r",
									"    pm.test(cws_count_string, () => {\r",
									"        pm.expect(response.count).to.eql(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"postman.setNextRequest(\"Add Booking\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/v1/coworkingspaces",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"coworkingspaces"
							]
						},
						"description": "Fetch all hospitals from database."
					},
					"response": []
				},
				{
					"name": "Add Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200, Booking created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const global_bookingID = response.data._id;\r",
									"\r",
									"pm.globals.set(\"global_bookingID\", global_bookingID);\r",
									"\r",
									"postman.setNextRequest(\"Add Booking fail\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "JSON Type",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"bookDate\": \"{{$randomDateFuture}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/coworkingspaces/{{global_CWSID}}/bookings/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"coworkingspaces",
								"{{global_CWSID}}",
								"bookings",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Booking fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500, Cannot create Booking\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Get One Booking\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "JSON Type",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"apptDate\": \"{{$randomDateFuture}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/coworkingspaces/{{global_CWSID}}/bookings/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"coworkingspaces",
								"{{global_CWSID}}",
								"bookings",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get One Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200, Get one booking succeeded\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Update Booking\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/v1/bookings/{{global_bookingID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"bookings",
								"{{global_bookingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200, Update booking succeeded\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Delete One Booking\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"bookDate\": \"{{$randomDateFuture}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/bookings/{{global_bookingID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"bookings",
								"{{global_bookingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete One Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200, Delete booking succeeded\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Logout\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/v1/bookings/{{global_bookingID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"bookings",
								"{{global_bookingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"TOKEN\", null);\r",
									"\r",
									"pm.test(\"Status code is 200, Logout successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/v1/auth/logout",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AdminRunner",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"TOKEN\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"Status code is 200, Login done\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Get All Bookings\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "JSON Type",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@gmail.com\",\r\n    \"password\": \"12345678\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/auth/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const index = Math.trunc(Math.random() * response.data.length);\r",
									"const global_BID = response.data[index]._id;\r",
									"\r",
									"pm.globals.set(\"global_BID\", global_BID);\r",
									"\r",
									"const booking_count = response.count;\r",
									"let booking_count_string;\r",
									"\r",
									"if (booking_count > 0) {\r",
									"    if (booking_count === 1) {\r",
									"        booking_count_string = \"There's only 1 booking\";\r",
									"    } else {\r",
									"        booking_count_string = \"There're \" + booking_count + \" bookings\";\r",
									"    }\r",
									"    pm.test(booking_count_string, () => {\r",
									"        pm.expect(response.count).to.be.above(0);\r",
									"    });\r",
									"} else {\r",
									"    booking_count_string = \"There's no booking\";\r",
									"    pm.test(booking_count_string, () => {\r",
									"        pm.expect(response.count).to.eql(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"postman.setNextRequest(\"Best User\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/v1/bookings",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Best User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Update Booking\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/v1/bookings/bestUser",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"bookings",
								"bestUser"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200, Update booking succeeded\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Delete One Booking\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"bookDate\": \"{{$randomDateFuture}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/bookings/{{global_BID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"bookings",
								"{{global_BID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete One Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200, Delete booking succeeded\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/v1/bookings/{{global_BID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"bookings",
								"{{global_BID}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "URL",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}